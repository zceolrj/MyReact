阅读实战java虚拟机性能优化

通过锁，可以实现线程安全，对于线程安全简单的理解，就是在多线程环境下，无论多个线程如何访问目标对象，目标对象的状态应该始终是保持一致的，线程的行为也总是正确的。

虚拟机内部对锁的优化
偏向锁
自旋锁
锁消除

锁在应用层的优化思路
减少锁的持有时间
减小锁粒度   ConcurrentHashMap
锁分离   LinkedBlockingQueue
锁粗化
无锁CAS  compare and swap




java内存模型
原子性   典型的 i++     synchronized
基本类型的访问读写具备原子性，long和double在某些场景下除外。
可见性   每个CPU都拥有独立的寄存器和高速缓存   volatile
Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性的。无论是普通变量还算volatile变量都是如此，普通变量与volatile变量的区别是，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前从主内存刷新。因此，可以说volatile保证了多线程操作时变量的可见性，而普通变量则不能保证这一点。
除了volatile之外，还有两个关键字能实现可见性：synchronized和final

有序性

synchronized同时解决原子性、可见性、有序性问题

Happens-Before原则
程序顺序原则：一个线程内保证语义的串行性。
volatile规则：volatile变量的写，先发生于读，这保证了volatile变量的可见性。
锁规则：unlock必然发生在随后的lock前。
传递性：A先于B，B先于C，那么A必然先于C。
线程的start方法先于它的每一个动作。
线程的所有操作先于线程的终结(Thread.join())
线程的中断(interrupt())先于被中断线程的代码。
对象的构造函数执行结束先于finalize()方法。



mysql数据库
存储过程和函数，触发器，视图，游标，数据库分页   ---todo
sql性能优化
B树
读写分离
水平拆分、垂直拆分


soa   - soap

并发

nio
IO多路复用

单例模式  -- OK

分布式缓存

消息队列

JVM
java内存区域
垃圾回收算法
复制清除算法  -- 新生代
标记整理算法  -- 老年代

TCP三次握手

事务
事务(Transaction)是并发控制的基本单位。
所谓事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。例如，银行转帐工作：从一个帐号扣款并使另一个帐号增款，这两个操作要么都执行，要么都不执行。
数据库事务必须具备ACID特性，ACID是Atomic（原子性）、Consistency（一致性）、Isolation（隔离性）和Durability（持久性）的英文缩写。
ACID   原子性、一致性、隔离性、持久性
Atomic(原子性)：指整个数据库事务是不可分割的工作单位。只有使事务中的所有操作都执行成功，才算是整个事务成功。事务中任何一个SQL语句执行失败，那么已经执行成功的SQL语句也必须撤销，数据库状态应该退回到执行事务前的状态。
Consistency(一致性): 指数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。
Isolation(隔离性):指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。
持久性：指的是只要事务成功结束，它对数据库所做的更新就必须永久保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。
事务的（ACID）特性是由关系数据库管理系统（RDBMS，数据库系统）来实现的。数据库管理系统采用日志来保证事务的原子性、一致性和持久性。日志记录了事务对数据库所作的更新，如果某个事务在执行过程中发生错误，就可以根据日志，撤销事务对数据库已做的更新，使数据库退回到执行事务前的状态。
数据库管理系统采用锁机制来实现事务的隔离性。当多个事务同时更新数据库中相同的数据时，只允许持有锁的事务能更新该数据，其他事务必须等待，直到前一个事务释放了锁，其他事务才有机会更新该数据。

ConcurrentHashMap

http status code


javascript闭包
javascript原型链



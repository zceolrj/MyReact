阅读实战java虚拟机性能优化

通过锁，可以实现线程安全，对于线程安全简单的理解，就是在多线程环境下，无论多个线程如何访问目标对象，目标对象的状态应该始终是保持一致的，线程的行为也总是正确的。

虚拟机内部对锁的优化
偏向锁
自旋锁
锁消除

锁在应用层的优化思路
减少锁的持有时间
减小锁粒度   ConcurrentHashMap
锁分离   LinkedBlockingQueue
锁粗化
无锁CAS  compare and swap




java内存模型
原子性   典型的 i++     synchronized
基本类型的访问读写具备原子性，long和double在某些场景下除外。
可见性   每个CPU都拥有独立的寄存器和高速缓存   volatile
Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性的。无论是普通变量还算volatile变量都是如此，普通变量与volatile变量的区别是，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前从主内存刷新。因此，可以说volatile保证了多线程操作时变量的可见性，而普通变量则不能保证这一点。
除了volatile之外，还有两个关键字能实现可见性：synchronized和final

有序性
重排许，内存栅栏  ---- not OK
synchronized同时解决原子性、可见性、有序性问题

Happens-Before原则
程序顺序原则：一个线程内保证语义的串行性。
volatile规则：volatile变量的写，先发生于读，这保证了volatile变量的可见性。
锁规则：unlock必然发生在随后的lock前。
传递性：A先于B，B先于C，那么A必然先于C。
线程的start方法先于它的每一个动作。
线程的所有操作先于线程的终结(Thread.join())
线程的中断(interrupt())先于被中断线程的代码。
对象的构造函数执行结束先于finalize()方法。



mysql数据库
存储过程和函数，触发器，视图，游标，数据库分页   ---todo
sql性能优化
B树
读写分离
水平拆分、垂直拆分


soa   - soap

并发

nio    --- important!!!   -- todo
IO多路复用

单例模式  -- OK

分布式缓存  --- redis

消息队列  --- todo

JVM
java内存区域   ---- todo
1.程序计数器
线程私有
2.虚拟机栈
线程私有
3.本地方法栈
4.Java堆
所有线程共享
5.方法区
所有线程共享
用于存储已经被加载的类信息、常量、静态变量、即时编译器编译后的代码

6.运行时常量池
是方法区的一部分。class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生存的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。

7.直接内存
直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。但是这部分内存也被频繁使用，而且也可能导致OutOfMemoryError
NIO引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。



JVM内存分代，java8内存分代改进
垃圾回收算法   ---- 使用场景  -- todo
标记清除算法 --- 基本不用
复制清除算法  -- 新生代
标记整理算法  -- 老年代

TCP三次握手
TCP/IP 协议  --- 重要

事务
事务(Transaction)是并发控制的基本单位。
所谓事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。例如，银行转帐工作：从一个帐号扣款并使另一个帐号增款，这两个操作要么都执行，要么都不执行。
数据库事务必须具备ACID特性，ACID是Atomic（原子性）、Consistency（一致性）、Isolation（隔离性）和Durability（持久性）的英文缩写。
ACID   原子性、一致性、隔离性、持久性
Atomic(原子性)：指整个数据库事务是不可分割的工作单位。只有使事务中的所有操作都执行成功，才算是整个事务成功。事务中任何一个SQL语句执行失败，那么已经执行成功的SQL语句也必须撤销，数据库状态应该退回到执行事务前的状态。
Consistency(一致性): 指数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。
Isolation(隔离性):指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。
持久性：指的是只要事务成功结束，它对数据库所做的更新就必须永久保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。
事务的（ACID）特性是由关系数据库管理系统（RDBMS，数据库系统）来实现的。数据库管理系统采用日志来保证事务的原子性、一致性和持久性。日志记录了事务对数据库所作的更新，如果某个事务在执行过程中发生错误，就可以根据日志，撤销事务对数据库已做的更新，使数据库退回到执行事务前的状态。
数据库管理系统采用锁机制来实现事务的隔离性。当多个事务同时更新数据库中相同的数据时，只允许持有锁的事务能更新该数据，其他事务必须等待，直到前一个事务释放了锁，其他事务才有机会更新该数据。

ConcurrentHashMap    -- todo
ConcurrentLinkedQueue
CopyOnWriteArrayList
ConcurrentSkipListMap


http status code


javascript闭包
javascript原型链


--------------


Servlet是否线程安全？  ---- 看你的实现了

内存泄漏：该回收的没有被回收，去检查GC Roots
内存溢出：都该存活的，但是太多，导致溢出。

本机直接内存溢出
由DirectMemory导致的内存溢出，一个明显的特征是在Heap Dump文件中不会看见明显的异常，如果读者发现OOM之后Dump文件很小，而程序中又直接或间接使用了NIO，那就可以考虑检查一下是不是这方面的原因。

在Java语言中，可以作为GC Roots的对象包括下面几种：
1、虚拟机栈（栈帧中的本地变量表）中引用的对象。
2、方法区中类静态属性引用的对象。
3、方法区中常量引用的对象。
4、本地方法栈中JNI（即一般说的Native方法）引用的对象。

永久代：方法区
新生代和老年代：堆

新生代：老年代 = 1 : 2
Eden:Survivor1:Survivor2 = 8 : 1 : 1


对象优先在eden分配
大对象直接进入老年代
长期存活的对象将进入老年代

JVM什么时候触发full GC
1、eden空间不够存放新对象时，触发minor GC
在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间。
如果这个条件成立，那么Minor GC可以确保是安全的。
如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。
如果允许，那么会继续检查老年代的最大可用连续空间是否大于历次晋升到老年代对象的平均大小。
如果大于，将尝试进行一次Minor GC，尽管这次Minor GC是有风险的。
如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC


JVM编译优化
怎样确定服务端的一个死循环？

SQL层面的性能优化
索引？

TCP的11种状态, TIME_WAIT状态的原因
客户端：CLOSED SYNC_SENT ESTABLISHED FIN_WAIT1 FIN_WAIT2 TIME_WAIT 
服务端：LISTEN SYNC_RCVD ESTABLISHED CLOSE_WAIT LAST_ACK CLOSED
罕见的：CLOSING


设计模式  
io 装饰器模式？适配器模式？
reactor模式？

linux
swap分区？

nio selector实现原理








